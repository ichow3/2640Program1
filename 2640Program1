#Program 1: Getting familiar with Assembly and MIPS

#CS 2640
#Author Name: Ian Chow
#October 28, 2023
#1) Get user inputs, move them to registers, and print it back to them
#2) Execute 4 arithmetic operations and print them all out
#3) Check if the inputs were equal to each other or not

 .data
 input1: .asciiz "Input an integer: "
 input2: .asciiz "Input another integer: "
 message1: .asciiz "Added Nums: "
 message2: .asciiz "\nSubtracted Nums: "
 message3: .asciiz "\nMultiplied Nums: "
 message4: .asciiz "\nDivided Nums: "
 message5: .asciiz "\nUser inputs are different"
 message6: .asciiz "\nUser inputs are the same"
 
 .text
 
  main:
  
  #print out prompt1 and get first integer
  li $v0, 4
  la $a0, input1
  syscall
  li $v0, 5
  syscall
  move $s0, $v0 #store first user integer in $s0
  
  #print out prompt2 and get second integer
  li $v0, 4
  la $a0, input2
  syscall
  li $v0, 5
  syscall
  move $s1, $v0 #store first user integer in $s1
  
  #Checks the Sum of the two inputs
  li $v0, 4
  la $a0, message1
  syscall
  
  #Display Message
  li $v0, 1
  add $a0, $s0, $s1 #a0 <- s0 + s1
  syscall
  
  #Checks the Difference of the two inputs
  li $v0, 4
  la $a0, message2
  syscall
  
  #Display Message
  li $v0, 1
  sub $a0, $s0, $s1 #a0 <- s0 - s1
  syscall
  
  #Checks the Multiple of the two inputs
  li $v0, 4
  la $a0, message3
  syscall
  
  #Display Message
  li $v0, 1
  mul $a0, $s0, $s1 #a0 <- s0 * s1
  syscall
  
  #Divides the two inputs
  li $v0, 4
  la $a0, message4
  syscall
  
  #Display Message
  li $v0, 1
  div $a0, $s0, $s1 #a0 <- s0 / s1
  syscall
  
  #It checks whether the values in registers $s0 and $s1 are equal
  beq $s0, $s1, inputs_are_equal #Jumps to the inputs_are_equal line if true
  li $v0, 4
  la $a0, message5 #Prints that they are not equal to each other
  syscall
  j end_condition #Jumps to the end condition
  inputs_are_equal:
  li $v0, 4
  la $a0, message6#Prints that they are equal to each other
  syscall
  end_condition:
  
  
